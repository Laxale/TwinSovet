<Application x:Class="TwinSovet.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 

             xmlns:local="clr-namespace:TwinSovet"
             xmlns:helpers="clr-namespace:TwinSovet.Helpers"
             xmlns:viewModels="clr-namespace:TwinSovet.ViewModels"
             xmlns:views="clr-namespace:TwinSovet.Views"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:loc="clr-namespace:TwinSovet.Localization;assembly=TwinSovet.Localization"
             xmlns:subjects="clr-namespace:TwinSovet.ViewModels.Subjects"

             mc:Ignorable="d"
             StartupUri="MainWindow.xaml">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="./XamlResources/Brushes.xaml"/>
                <ResourceDictionary Source="./XamlResources/Margins.xaml"/>
                <ResourceDictionary Source="./XamlResources/PathStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/Converters.xaml"/>
                <ResourceDictionary Source="./XamlResources/GridStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/BorderStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/ButtonStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/TextBoxStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/ListBoxStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/DataTemplates.xaml"/>
                <ResourceDictionary Source="./XamlResources/TetxBlockStyles.xaml"/>
                <ResourceDictionary Source="./XamlResources/GeometryResources.xaml"/>
                <ResourceDictionary Source="./XamlResources/TemplateSelectors.xaml"/>
                
                <ResourceDictionary Source="./XamlResources/InputBindings.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Duration x:Key="SlideAnimDuration">0:0:0.5</Duration>

            <system:Double x:Key="SlidePanelWidth">400</system:Double>
            <system:Boolean x:Key="TrueBoolFlag">True</system:Boolean>
            <system:Boolean x:Key="FalseBoolFlag">False</system:Boolean>

            <KeyBinding x:Key="NewKeyBinding" Key="N" Modifiers="Control" Command="New"/>
            <KeyBinding x:Key="EnterKeyBinding" Key="Enter" Command="helpers:ClientCommands.Enter"/>
            <KeyBinding x:Key="EscapeKeyBinding" Key="Escape" Command="helpers:ClientCommands.Cancel"/>



            <!--
            TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
            TargetProperty="(FrameworkElement.LayoutTransform).(RotateTransform.Angle)"
            TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(Angle)"
            TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(Angle)"
            -->
            <Storyboard x:Key="RotationStoryBoard" RepeatBehavior="Forever"
                        TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                        >
                <DoubleAnimation From="0" To="360" Duration="0:0:1.5"/>
            </Storyboard>

            <Style x:Key="StackPanelInListAlternatedStyle" TargetType="StackPanel">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                               Path=(ItemsControl.AlternationIndex)}"
                                 Value="0">
                        <Setter Property="Background" Value="{StaticResource LightGrayBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                                               Path=(ItemsControl.AlternationIndex)}"
                                 Value="1">
                        <Setter Property="Background" Value="{StaticResource AlmostTransparent}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="MaskBorderStyle" TargetType="Border">
                <Setter Property="Opacity" Value="0.6"/>
                <Setter Property="Background" Value="{StaticResource LightGrayBrush}"/>
            </Style>

            <Style x:Key="HighlightOrphansToggleButtonStyle" TargetType="ToggleButton">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="ToolTip" Value="{x:Static loc:Resources.DoHighlightFlatsWithoutOwner}"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Name="Bord" Background="{StaticResource AlmostTransparent}">
                                <ContentPresenter/>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="Bord" Property="Background" Value="{StaticResource LightGrayBrush}"/>
                                </Trigger>

                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="Bord" Property="BorderBrush" Value="{StaticResource SteelGrayBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="BirdyToggleButtonStyle" TargetType="ToggleButton">
                <Setter Property="Width" Value="24"/>
                <Setter Property="Height" Value="24"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Name="Bord" Background="{TemplateBinding Background}" 
                                    CornerRadius="{StaticResource InListBorderCornerRadius}"
                                    Cursor="{TemplateBinding Cursor}" Padding="{TemplateBinding Padding}">
                                <Path Style="{StaticResource BirdyInButtonPathStyle}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource LightGrayBrush}"/>
                    </Trigger>

                    <Trigger Property="IsMouseOver" Value="False">
                        <Setter Property="Background" Value="{StaticResource AlmostTransparent}"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{StaticResource PanelGrayBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            
        </ResourceDictionary>
    </Application.Resources>
</Application>